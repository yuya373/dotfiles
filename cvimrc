let searchlimit = 30
let locale = "jp"
let mapleader = ","
let completionengines = ["google", "amazonjp"]
let searchengine amazonjp = "https://www.amazon.co.jp/s/&field-keywords=%s"
let searchalias g = "google"
let searchalias a = "amazonjp"

set noautofocus
set nosmoothscroll
set nonativelinkorder
set noshowtabindices
set completeonopen
set sortlinkhints
set cncpcompletion
set autohidecursor
set autoupdategist

yankForMarkdown -> {{
  const title = document.title;
  const url = window.location.href;
  const text = `[${title}](${url})`;
  Status.setMessage(text,3);
  Clipboard.copy(text);
}}

yankForOrgMode -> {{
  const title = document.title.replace(/\[/g, "【").replace(/\]/g, "】");
  const url = window.location.href;
  const text = `[[${url}][${title}]]`;
  Status.setMessage(text,3);
  Clipboard.copy(text);
}}

yankTitle -> {{
  const text = document.title;
  Status.setMessage(text,3);
  Clipboard.copy(text);
}}

openHatenaEntryInNewTab -> {{
  let location;
  let hatenaUrl;

  const canonical = document.querySelector('link[rel="canonical"]');

  if (canonical) {
    location = new URL(canonical.href);
  } else {
    location = window.location;
  }

  const {pathname, hostname, protocol, search, hash} = location;
  const isHttps = protocol === "https:";
  const baseUrl = `http://b.hatena.ne.jp/entry/${isHttps ? "s/" : ""}`

  if (hostname === "medium.com") {
    const paths = pathname.split("/");
    const filename = paths[paths.length - 1].split("-")
    const hash = filename[filename.length - 1];
    const mediumPath = paths.slice(0, paths.length - 1).concat([hash]).join("/");
    hatenaUrl = `${baseUrl}${hostname}${mediumPath}`;
  } else {
    hatenaUrl = `${baseUrl}${hostname}${pathname}`;
  }
  window.open(`${hatenaUrl}${search}${encodeURIComponent(hash)}`);
}}

yankGithubGitRepoAddr -> {{
  const input = document.querySelector(".ssh-clone-options .input-group input");
  const result = input ? input.value : "Not Found";
  Status.setMessage(result, 3);
  Clipboard.copy(result);
}}

unmap p
unmap a
map o :open<Space>
map <Leader>g :tabnew<Space>google<Space>
map <Leader>a :tabnew<Space>amazonjp<Space>
map m centerMatchH
map F createTabbedHint
map <Leader>f createActiveTabbedHint
map <Leader>h createHoverHint
map <Leader>H createUnHoverHint
map tt :tabnew<Space>
map tn nextTab
map tp previousTab
map tP pinTab
map tf firstTab
map tl lastTab
map tb :call openHatenaEntryInNewTab<CR>
map b :buffer<Space>
map <Leader>b :bookmark<Space>
map <Leader>r reloadTabUncached
map <Leader>x :restore<Space>
map R reloadTabUncached
unmap y
map yY yankUrl
map yy yankDocumentUrl
map ym :call yankForMarkdown<CR>
map yo :call yankForOrgMode<CR>
map yt :call yankTitle<CR>
map yg :call yankGithubGitRepoAddr<CR>
map J nextTab
map K previousTab
map M centerMatchH
map T centerMatchT
map B centerMatchB

iunmapAll
imap <C-k> deleteToEnd
imap <C-w> deleteWord

-> {{
  const extraFilters = {
      '*://app.zenhub.com/*': {
          reject: [],
          accept: ['.zhc-issue-card'],
      },
      '*://b.hatena.ne.jp/entry/*': {
        reject: [],
        accept: ['li.js-bookmarks-sort-tab'],
      },
  };

  Object.getOwnPropertyNames(extraFilters).forEach(pattern => {
      Hints.siteFilters[pattern] = extraFilters[pattern];
  });
}}
