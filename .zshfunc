function gim() {
vim `git ls-files | peco`
}

function cdgem() {
local gem_name=$(bundle list | sed -e 's/^ *\* *//g' | peco | cut -d \  -f 1)
if [ -n "$gem_name" ]; then
  local gem_dir=$(bundle show ${gem_name})
  echo "cd to ${gem_dir}"
  cd ${gem_dir}
fi
}

function pcd() {
local base="$1"
if [ ! -z "$1" ] ; then
  cd
fi
local dir="$( find . -maxdepth 1 -type d | sed -e 's;\./;;' | peco )"
if [ ! -z "$dir" ] ; then
  cd "$dir"
fi
}

function peco-select-history() {
local tac
if which tac > /dev/null; then
  tac="tac"
else
  tac="tail -r"
fi
BUFFER=$(\history -n 1 | \
  eval $tac | \
  peco --query "$LBUFFER")
CURSOR=$#BUFFER
zle clear-screen
}
zle -N peco-select-history


function peco-cdr () {
local selected_dir=$(cdr -l | awk '{ print $2 }' | peco)
if [ -n "$selected_dir" ]; then
  BUFFER="cd ${selected_dir}"
  zle accept-line
fi
zle clear-screen
}
zle -N peco-cdr


function peco-find-file () {
ls | peco | xargs vim -nw
zle clear-screen
}
zle -N peco-find-file

ls_abbrev() {
  if [[ ! -r $PWD ]]; then
    return
  fi
  # -a : Do not ignore entries starting with ..
  # -C : Force multi-column output.
  # -F : Append indicator (one of */=>@|) to entries.
  local cmd_ls='ls'
  local -a opt_ls
  opt_ls=('-aCF' '--color=always')
  case "${OSTYPE}" in
    freebsd*|darwin*)
      if type gls > /dev/null 2>&1; then
        cmd_ls='gls'
      else
        # -G : Enable colorized output.
        opt_ls=('-aCFG')
      fi
      ;;
  esac

  local ls_result
  ls_result=$(CLICOLOR_FORCE=1 COLUMNS=$COLUMNS command $cmd_ls ${opt_ls[@]} | sed $'/^\e\[[0-9;]*m$/d')

  local ls_lines=$(echo "$ls_result" | wc -l | tr -d ' ')

  if [ $ls_lines -gt 10 ]; then
    echo "$ls_result" | head -n 5
    echo '...'
    echo "$ls_result" | tail -n 5
    echo "$(command ls -1 -A | wc -l | tr -d ' ') files exist"
  else
    echo "$ls_result"
  fi
}

function do_enter() {
if [ -n "$BUFFER" ]; then
  zle accept-line
  return 0
fi
echo
echo -e "\e[0;33m--- ls ---\e[0m"
# ls
ls_abbrev
if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = 'true' ]; then
  echo
  echo -e "\e[0;33m--- git status ---\e[0m"
  git status -sb
  echo
fi
echo -e "\e[0;33m--- end ---\e[0m"
zle reset-prompt
return 0
}
zle -N do_enter

tmux_window_name()
{
  [[ -n "$vcs_info_msg_1_" ]] && tmux rename-window $vcs_info_msg_1_
}
add-zsh-hook precmd tmux_window_name
