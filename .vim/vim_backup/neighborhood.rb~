# -*- coding: utf-8 -*-
# == Schema Information
#
# Table name: neighborhoods
#
#  id         :integer          not null, primary key
#  name       :string(255)      not null
#  key        :string(255)      not null
#  created_at :datetime
#  updated_at :datetime
#
# Indexes
#
#  key  (key) UNIQUE
#

class Neighborhood < ActiveRecord::Base
  has_many :neighborhood_stations
  has_many :stations, through: :neighborhood_stations
  has_many :listing_stations, through: :stations

  validates :name, presence: true
  validates :key, presence: true

  scope :key_is, ->(key){
    where key: key
  }
  scope :station_g_cd_is, ->(station_g_cd){
    joins(:neighborhood_stations).
    merge(NeighborhoodStation.where(station_g_cd: station_g_cd)).distinct
  }
# [[2, "新宿"], [3, "四ツ谷"], [5, "新橋"], [6, "神田"], [7, "東京・大手町"], [8, "飯田橋"], [9, "目黒"], [10, "自由が丘"], [11, "横浜"], [12, "銀座"], [13, "池袋"], [14, "埼玉"], [18, "品川"], [19, "秋葉原"], [20, "田町"], [21, "木場"], [22, "渋谷"], [23, "中目黒"], [24, "原宿"]]

  class << self
    def for_options
      @for_options ||= Neighborhood.pluck(:name,:key)
    end

    def featured
      keys = ["shinjyuku","shibuya","otemachi","shinbashi",].freeze
      key_is(keys).sort_by{|e| keys.index(e.key) }
    end

    def tagged
      keys = ["yotsuya","iidabashi","kanda","ikebukuro","shinagawa","akihabara",
              "ginza","jiyugaoka","yokohama","saitama","meguro"].freeze
      key_is(keys).sort_by{|e| keys.index(e.key) }
    end


    def yamanote
      where(id: [2,5,6,13,18,20,22,24,9])
    end
  end

  def listings
    Listing.where(id: listing_stations.pluck(:listing_id).uniq).published
  end

  def listings_count
    listings.count
  end
end
