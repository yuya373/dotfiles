/** @jsx React.DOM */

define([
  "react",
  "components/mixins/AjaxMixin",
  "components/mixins/SlotMixin",
  "components/mixins/MessageHandlerMixin",
  "components/mixins/DatetimeHelper",
  "components/pc/scheduleViewer/CalendarHeader",
  "components/pc/scheduleViewer/ViewerSlots",
  "components/mixins/SchedulerHelper",
  "components/pc/scheduler/AgendaBody",
  "components/pc/scheduler/TimeFrame",
  "components/pc/scheduler/SchedulerPager",
  "components/pc/listingAvailability/AvailabilityCheckModal",
  "components/mixins/scheduleViewer/ScheduleViewerAppMixin"
  ], function(React, AjaxMixin, SlotMixin, MessageHandlerMixin, DatetimeHelper, CalendarHeader, ViewerSlots, SchedulerHelper, AgendaBody, TimeFrame, SchedulerPager, AvailabilityCheckModal, ScheduleViewerAppMixin) {
  var ScheduleViewerApp = React.createClass({
    mixins: [AjaxMixin, SlotMixin, MessageHandlerMixin, SchedulerHelper, ScheduleViewerAppMixin],
    getInitialState: function() {
      return {
        "selectedSlotData": null,
        "datasource"  : {},
        "hourlySlots" : _.range(4),
        "slotHeight"  : 25,
        "slotWidth"   : 124  // hard-coding from scheduler.css.scss because $.fn.outerWidth() and width() value varies on the browser
      };
    },
    updateState: function(postData, params) {
      console.log("postData", postData);
      var data = _.extend(postData || {}, {
        "listingId": this.props.properties.listingId
      });
      if(postData.startsAt) {
        data["startsAt"] = postData.startsAt;
      }
      this.ajaxGet({
        "api"      : this.props.properties.apiGetSchedule,
        "data"     : data,
        "callback" : params.callback,
        "messageCallback"   : this.handleMessage,
        "showSuccessMessage": false
      });
    },
    render: function() {
      var hours = _.range(24);
      return (
        <div className="scheduler-app">
          {this.makeFixedAlertView()}
          <AvailabilityCheckModal
            ref="availabilityCheck"
            onProceed={this.proceedToPreBooking}
            onDismiss={this.dismissAvCheckModal}
            apiGetStatus={this.props.properties.apiGetStatus}
            minBookingMinutes={this.props.properties.minBookingMinutes}
            minBookingTimeStr={this.props.properties.minBookingTime}
            otherListingsUri={this.props.properties.otherListingsUri}
            selectedSlotData={this.state.selectedSlotData} />
          {this.renderBackdrop()}
          <SchedulerPager
            days={this.state.datasource.days}
            onWeekChange={this.handleWeekChange}
            forViewer={true}
            ref="pager" />
          <div className="scheduler-main">
            {this.renderHeader()}
            <div className="scheduler-time-frame for-viewer">
              <div ref="shell" className={this.getCanvasShellClassName()}>
                <TimeFrame
                  ref="timeFrame"
                  hasSlots={this.state.hasSlots}
                  hours={hours}
                  hourlySlots={this.state.hourlySlots} />
                {this.renderEventCanvas(this.state.hourlySlots)}
              </div>
            </div>
          </div>
        </div>
      );
    },
    getCanvasShellClassName: function() {
      return "scheduler-rows-shell " + ( (this.state.hasSlots) ? "" : "no-slots-shell");
    },
    renderHeader: function() {
      return (
        <div className="scheduler-agenda-frame">
          <table className="schedule-agenda-table">
            <CalendarHeader
              ref="header"
              listingId ={this.props.properties.listingId}
              days      ={this.state.datasource.days || this.makeBlankDays()} />
            <AgendaBody
              hasSlots={this.state.hasSlots} />
          </table>
        </div>
      );
    },
    renderEventCanvas: function(hourlySlots) {
      if( _.isEmpty(this.state.datasource) ) { return; }
      // console.log("renderEventCanvas", this.props);
      var slotNum         = hourlySlots.length,
          style           = {};

      return <ViewerSlots
        ref="eventCanvas"
        listingId         ={this.props.properties.listingId}
        slotNum           ={slotNum}
        slotWidth         ={this.state.slotWidth}
        slotHeight        ={this.state.slotHeight}
        readonly          ={true}
        style             ={style}
        skipClosedBlockRendering = {true}
        defaultTime       ={this.props.properties.defaultTime}
        hasSlots          ={this.state.hasSlots}
        onSlotSelect      ={this.handleSlotSelect}
        listingAvailabilityUri ={this.props.properties.listingAvailabilityUri}
        days              ={this.state.datasource.days} />
    },
    makeBlankDays: function() {
      return [null, null, null, null, null, null, null];
    },
    hasSlots: function(days) {
      for(var i=0;i<days.length;i++) {
        if(days[i].slots && days[i].slots.length > 0) {
          return true;
        }
      }
      return false;
    }
  });

  return ScheduleViewerApp;
});
