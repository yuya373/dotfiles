# == Schema Information
#
# Table name: conversations
#
#  id         :integer          not null, primary key
#  subject    :string(255)      not null
#  created_at :datetime
#  updated_at :datetime
#

require 'spec_helper'

describe Conversation do
  let(:conv){ create :conversation }
  let(:provider_user){ create :provider_user }
  let(:user){ create :user }
  let(:provider_user_receipt){ create(:receipt, receiver: provider_user) }
  let(:user_message){ create(:user_message, sender: user, conversation: conv, receipt: provider_user_receipt) }
  let(:user_receipt){ create(:receipt, receiver: user) }
  let(:provider_user_message){ create(:provider_user_message, sender: provider_user, conversation: conv, receipt: user_receipt) }

  describe "last_message" do
    it "return last message" do
      msg1 =  create(:message, conversation: conv, created_at: "2014-02-16 09:22:51")
      msg2 =  create(:message, conversation: conv, created_at: "2014-02-19 09:22:51")
      expect(conv.last_message).to eql(msg2)
    end
  end

  describe "sender_is" do
    it do
      msg1 = create(:message, sender: provider_user, conversation: conv)
      msg2 = create(:message, sender: user, conversation: conv)

      expect(conv.sender_is(provider_user).first).to eql(msg1)
    end
  end

  describe "messages_for" do
    it do
      receipt1 = user_receipt
      msg1 = provider_user_message
      receipt2 = provider_user_receipt
      msg2 = user_message

      expect(conv.messages_for(provider_user).first).to eql(msg2)
    end
  end

  describe "mark_as_read" do
    it do
      receipt1 = user_receipt
      receipt1.update_attributes(is_read: false)
      msg1 = provider_user_message

      expect{
        conv.mark_as_read(user)
        receipt1.is_read
      }.to be_true
    end
  end

  describe "pre_booking" do
    it do
      user = create :user
      listing = create(:d_listing)
      pre_booking = create(:pre_booking, listing: listing)
      pre_booking_conversation = create(:pre_booking_conversation, pre_booking: pre_booking, conversation: conv)

      expect(conv.pre_booking).to eql(pre_booking)
    end
  end
end
