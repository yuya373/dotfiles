require 'spec_helper'

describe ContactsController do
  shared_examples("public access to contacts") do
    describe 'GET #index' do
      let(:smith){create(:contact, lastname: "Smith")}
      let(:jones){create(:contact, lastname: "Jones")}

      context 'with params[:letter]' do
        it "populates an array of contacts starting with the letter" do
          get :index, letter: "S"
          expect(assigns(:contacts)).to match_array([smith])
        end

        it "renders the :index view" do
          get :index, letter: "S"
          expect(response).to render_template :index
        end
      end

      context 'without params[:letter]' do
        it "populates an array of all contact" do
          get :index
          expect( assigns(:contacts) ).to match_array( [smith, jones] )
        end

        it "renders the :index view" do
          get :index
          expect(response).to render_template :index
        end
      end
    end

    describe 'GET #show'do
      let(:contact){ create(:contact) }

      it "assigns the requested contact to @contact" do
        get :show, id: contact
        expect(assigns(:contact)).to eq contact
      end

      it "renders the :show template" do
        get :show, id: contact
        expect(response).to render_template :show
      end
    end
  end

  shared_examples("full access to contacts") do
    describe 'GET #new' do
      it "assigns a new Contact to @contact" do
        get :new

        expect( assigns(:contact) ).to be_a_new(Contact)
      end
      it "renders the :new template" do
        get :new

        expect(response).to render_template :new
      end
    end

    describe 'GET #edit' do
      let(:contact){create(:contact)}

      it "assigns the requested contact to @contact" do
        get :edit, id: contact
        expect( assigns(:contact) ).to eq contact
      end
      it "renders the :edit template" do
        get :edit, id: contact
        expect(response).to render_template :edit
      end
    end

    describe 'POST #create' do
      let(:phones){
        [ attributes_for(:phone),
        attributes_for(:phone),
        attributes_for(:phone) ]
      }

      let(:contact_attr){ attributes_for(:contact, phones_attributes: phones) }

      context "with valid attributes" do
        it "saves the new contact in the database" do
          expect {
            post :create, contact: contact_attr
          }.to change(Contact, :count).by(1)
        end

        it "redirects to contacts#show" do
          post :create, contact: contact_attr
          expect(response).to redirect_to contact_path(assigns[ :contact ])
        end
      end

      context "with invalid attributes" do
        it "does not save the new contact in the database" do
          expect{
            post :create, contact: attributes_for(:invalid_contact, phones_attributes: phones)
          }.not_to change(Contact, :count).by(1)
        end
        it "re-renders the :new template" do
          post :create, contact: attributes_for(:invalid_contact, phones_attributes: phones)

          expect(response).to render_template :new
        end
      end
    end

    describe "PATCH #update" do
      let(:contact){ create(:contact, firstname: 'yuya', lastname: 'minami') }

      context "with valid attributes" do
        it "located the requested @contact" do
          patch :update, id: contact, contact: attributes_for(:contact)
          expect(assigns(:contact)).to eq contact
        end
        it "updates the contact in the database" do
          patch :update, id: contact, contact: attributes_for(:contact,
                                                               firstname: 'hajime')
          contact.reload
          expect(contact.firstname).to eq('hajime')
        end
        it "redirects to the contact" do
          patch :update, id: contact, contact: attributes_for(:contact)
          expect(response).to redirect_to @contacc
        end
      end

      context "with invalid attributes" do
        it "located the requested contact" do
          patch :update, id: contact, contact: attributes_for(:contact)
          expect(assigns(:contact)).to eq contact
        end
        it "does not updates the contact" do
          patch :update, id: contact, contact: attributes_for(:contact,
                                                               firstname: nil)
          contact.reload
          expect(contact.firstname).not_to eq nil
        end
        it "re-renders the #edit template" do
          patch :update, id: contact, contact: attributes_for(:invalid_contact)
          expect(response).to render_template :edit
        end
      end
    end

    describe "DELETE #destroy" do
      let(:contact){ create(:contact) }
      it "deletes the contact from the database" do
        contact
        expect{
          delete :destroy, id: contact
        }.to change(Contact, :count).by(-1)
      end
      it "redirects to users#index" do
        delete :destroy, id: contact
        expect(response).to redirect_to contacts_url
      end
    end

    describe "PATCH hide_contact" do
      let(:contact){ create(:contact) }

      it "marks the contact as hidden" do
        patch :hide_contact, contact_id: contact
        expect(contact.reload).to make_hidden
      end

      it "redirects to contacts#index" do
        patch :hide_contact, contact_id: contact
        expect(response).to redirect_to contacts_url
      end
    end
  end

  describe "administrator access" do
    before :each do
      set_user_session create(:admin)
    end

    it_behaves_like "public access to contacts"
    it_behaves_like "full access to contacts"
  end

  describe "user access" do
    before :each do
      set_user_session create(:user)
    end

    it_behaves_like "public access to contacts"
    it_behaves_like "full access to contacts"
  end

  describe "guest access" do
    it_behaves_like "public access to contacts"

    let(:contact){ create(:contact) }

    describe "GET #new" do
      it "requires login" do
        get :new
        expect(response).to require_login
      end
    end

    describe "GET #edit" do
      it "requires login" do
        get :edit, id: contact
        expect(response).to require_login
      end
    end

    describe "POST #create" do
      it "requires login" do
        post :create, id: contact, contact: attributes_for(:contact)
        expect(response).to require_login
      end
    end

    describe "PUT #update" do
      it "requires login" do
        put :update, id: contact, contact: attributes_for(:contact)
        expect(response).to require_login
      end
    end

    describe "DELETE #destroy" do
      it "requires login" do
        delete :destroy, id: create(:contact)
        expect(response).to require_login
      end
    end
  end


  describe 'CSV output' do
    it "returns a CSV file" do
      get :index, format: :csv
      expect(response.headers['Content-Type']).to have_content('text/csv')
    end

    it "returns contend" do
      create(:contact, firstname: 'Yuya', lastname: 'Minami',
             email: 'yuya373@me.com')
      create(:contact, firstname: 'John', lastname: 'Doe',
             email: 'john_doe@example.com')
      get :index, format: :csv
      expect(response.body).to have_content(
        "John Doe,john_doe@example.com Yuya Minami,yuya373@me.com")
    end
  end
end
