/*
 * StatusLsForm.js
 */
define([
    "components/pc/listingSearch/BaseLsForm",
    "components/mixins/DatetimeHelper",
    "lib/zenkaku_hankaku"
  ], function(BaseLsForm, DatetimeHelper) {
  return BaseLsForm.extend({
    install: function() {
      this._super(BaseLsForm, "install");
      _.bindAll(this, "triggerSubmit", "prepareValues");

      // var fields = ["date", "party", "hours", "timeValue"],
      var fields = ["date", "party", "hours", "timeValue"],
          t      = this;
      fields.map(function(field){
        t.select(field).change(t.triggerSubmit);
      });

      this.timePicker.on("hide.timepicker", function() {
        t.select("timeValue").trigger("change");
      });

      this.timePicker.on("changeTime.timepicker", function(e) {
        var h = parseInt(e.time.hours),
            m = parseInt(e.time.minutes);
        if(e.time.meridian === "PM") {
          h += 12;
        }
        var value = DatetimeHelper.intToTwoChars(h) + ":" + DatetimeHelper.intToTwoChars(m);
        t.select("timeValue").val(value);
      });

      $(document).bind("appready", this.prepareValues);
    },
    prepareValues: function() {
      // Date
      var dateint = (Arg("date") || "").toString();
      // console.log("dateint", dateint);
      if(dateint && dateint.length == 8) {
        var o = DatetimeHelper.dateIntToYmdKeys(dateint),
            s = o.y + "年" + o.m + "月" + o.d + "日";
        this.select("date").val(s);
      }
      else {
        this.select("date").val("");
      }
      // Time
      var timeValue = this.select("time").val(),
          timeLabel = DatetimeHelper.convertTimeLabelFromMeridian(timeValue);
          this.select("timeValue").val(timeLabel);
      this.triggerSubmit();
    },
    triggerSubmit: function() {
      var dateLabel = this.blankToNull( this.select("date").val() ),
          dateValue = null;

      if( !_.isNull(dateLabel) ) {
        dateLabel = dateLabel.replace("年", "/").replace("月", "/").replace("日", "");
        var date  = new Date(dateLabel + " 0:00:00");
        dateValue = date.getFullYear().toString() +
                    DatetimeHelper.intToTwoChars(date.getMonth() + 1) +
                    DatetimeHelper.intToTwoChars(date.getDate());
      }
      // console.log("dateValue", dateValue);
      // pack values
      this.select("hours").change(
        function(){
          var str = $(this).val();
          $(this).val(zenToHanStr(str));
        }
      );
      this.select("party").change(
        function(){
          var str = $(this).val();
          $(this).val(zenToHanStr(str));
        }
      );
      var data = {
        "id"   : this.props.id,
        "date" : dateValue,
        "time" : this.blankToNull( this.select("timeValue").val() ),
        "party": this.blankToNull( this.select("party").val() ),
        "hours": this.blankToNull( this.select("hours").val() )
      };
      var shouldTrigger = true;
      _.keys(data).map(function(key) {
        if(!data[key]) {
          shouldTrigger = false;
        }
      });

      // console.log("triggerSubmit", shouldTrigger, data);
      if(shouldTrigger === false) { return; }
      this.trigger("checkStatus", {"data":data });
    },
    blankToNull: function(value) {
      if(_.isString(value)) { value = value.trim(); }
      if(value === "")      { return null; }
      return value;
    },
    pickadateOptions: function() {
      return {
        "klass": {
          picker: "picker picker-listing-page",
          holder: "picker__holder picker__holder-listing-page"
        },
        "min": new Date()
        // "onStart": function() {
        //     var date = new Date();

        //     this.set( "select", [date.getFullYear(), date.getMonth(), date.getDate() + 5] );
        // }
      };
    }
  });
});
