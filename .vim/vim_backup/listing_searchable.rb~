module ListingSearchable
  extend ActiveSupport::Concern
  include TimeParamParser

  included do
    helper_method :related_search
  end

  private

  def listing_search(scoped_listing, from, to)
    return scoped_listing if keeped_query.blank?
    from, to = search_from_to(*keeped_query.values_at(:date,:time,:hours))

    listing_ids = ListingStation.location_is(keeped_query[:neighborhood]).
      distinct(:listing_id).pluck(:listing_id)
    listings = scoped_listing.where(id: listing_ids).
      capacity_gteq(keeped_query[:party].to_i).available_between(from, to)

    listings = listings.min_booking_minutes_lteq((to - from)/60) if to && from
    listings = available_today(listings, from)
    listings.joins_usage(keeped_query[:usage_id])
  end

  def available_today(listings, from)
    now = Time.now
    return listings unless todays_query?(from, now)
    return Listing.none if from <= now || !RoomAvail.in_limit?(from)
    listings.acceptable_from_now_minutes_lteq(((from - now)/60).to_i)
  end

  def todays_query?(time, now=Time.now)
    return false if time.blank?
    time <= now.end_of_day
  end

  def search_from_to(date, time, hours)
    return if date.blank?
    date = Date.parse date
    return [date.end_of_day, date.beginning_of_day] if time.blank?
    from = merge_time_with_date(date, Time.parse(time))
    to = from
    to += hours.to_i.hours if hours.present?
    [from, to]
  end

  def related_search(keeped_query, listing)
    if keeped_query[:date]
      from, to = search_from_to(*keeped_query.values_at(:date,:time,:hours))
      listing_search(Listing, from, to).published
    else
      listing.neighborhood_listings
    end.where.not(id: listing.id).published.
      includes(:listing_station => :station).price_asc.limit(5)
  end
end
