class RoomAvail
  class << self
    def between(listing, date, start_at, end_at)
      room_calendar = listing.room_calendars.for_price(date).first
      if room_calendar
        room_schedules = schedules(listing, start_at, end_at)
        price = room_calendar.range_price(start_at, end_at) if room_schedules.present?
      end
      new(listing, room_schedules, start_at, end_at, price)
    end

    def covering_room_schedules(listing, start_at, end_at)
      listing.room_schedules.
        contains_range(start_at,
                       listing.add_cleaning_minutes(end_at))
    end

    def in_limit?(time)
       time < 4.month.from_now
    end

    private

    def schedules(listing, start_at, end_at)
      return if !(start_at && end_at)
      return if start_at >= end_at
      return if start_at <= listing.time_available_from_now
      covering_room_schedules(listing, start_at, end_at).available
    end
  end

  def initialize(listing, room_schedules, start_at, end_at, price)
    @listing = listing
    @room_schedules = room_schedules
    @start_at, @end_at = start_at, end_at
    @price = price
  end

  def available?
    @room_schedules.present? && price > 0
  end

  def unknown?
    if @start_at <= Time.now.end_of_day || !RoomAvail.in_limit?(@start_at)
      return false
    end
    !available? && blank_schedule? && in_business_hour?
  end

  def price
    @price.to_i
  end

  private

  def blank_schedule?
    @room_schedules.blank? && !@listing.room_schedules.contains(@start_at).exists?
  end

  def in_business_hour?
    c = calendar_configuration(@listing, @start_at)
    c.open_at.to_i <= @start_at.truncate_ymd.to_i &&
      @end_at.truncate_ymd.to_i <= c.close_at.to_i
  end

  def calendar_configuration(listing, start_at)
    listing.calendar_configurations.days(start_at).first
  end
end
