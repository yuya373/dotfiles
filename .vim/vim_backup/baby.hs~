import Data.List
import Data.Char
import qualified Data.Map as Map

b = [[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3]]
xs = [ (1,3), (4,3), (2,4), (5,3), (5,6), (3,1)]
c = ( b !! 2 ) ++ ( b !! 1 )
d = map fst xs
e = [5,-3,-6,7,-3,2,-19,24]
f = [[1..5],[3..6],[1..7]]


doubleMe x = x + x
doubleUs x y = doubleMe x + doubleMe y
{- 100以下の数字を二倍する -}
doubleSmallNum x =  if x < 100
                      then doubleMe x
                      else x
conanO'Brien = "It's a me, Conan O'Brien"


boomBang xs = [ if x < 10 then "BOOM!" else "BANG!" | x <- xs, odd x]

length' xs = sum [ 2 | _ <- xs ]

removeNonUppercase :: [Char] -> [Char]
removeNonUppercase str = [ c | c <- str, c `elem` ['A'..'Z']]

triples = [ (a,b,c) | c <- [1..10], b <- [1..c], a <- [1..b], a^2 + b^2 == c^2,  a + b + c == 24]

addThree :: Int -> Int -> Int -> Int
addThree x y z = x + y + z

circumference :: Float -> Float
circumference r = 2 * pi * r


circumference' :: Double -> Double
circumference' r = 2 * pi * r

{- factorial :: Int -> Int -}
{- Intではでかすぎる数は0になる -}
factorial :: ( Num a, Eq a ) => a -> a
factorial 0 = 1
factorial n = n * factorial (n - 1)

addVectors :: (Double, Double) -> (Double, Double) -> (Double, Double)
addVectors (x1, y1) (x2, y2) = (x1 + x2, y1 + y2)

first :: (a, b, c) -> a
first (x, _, _) = x

second :: (a, b, c) -> b
second (_, y, _) = y

third :: (a, b, c) -> c
third (_, _, z) = z



{- 1:2:3:[] == [1,2,3] -}
head' :: [a] -> a
head' [] = error "Can't call head on an empty list, dummy!"
head' (x:_) = x

firstLetter :: String -> String
firstLetter "" = "Empty string, whoops!"
firstLetter all@(x:xs) = "The first letter of " ++ all ++ " is " ++ [x]

bmiTell :: Double -> Double -> String
bmiTell weight height
  | bmi <= 18.5 = show bmi ++ " You're underweight, you emo, you!"
  | bmi <= 25.0 = show bmi ++ " You're supposedly normal."
  | bmi <= 30.0 = show bmi ++ " You're fat!"
  | otherwise   = show bmi ++ " You're a whale, congratulations!"
  where bmi = weight / height ^ 2


{- maximum' :: (Ord a) => [a] -> a -}
{- maximum' [] = error "Empty!" -}
{- maximum' [x] = x -}
{- maximum' (x:xs) = max x (maximum' xs) -}

replicate' :: Int -> a -> [a]
replicate' n x
    | n <= 0 = []
    | otherwise = x : replicate' (n-1) x

take' :: Int -> [a] -> [a]
take' n _
    | n <= 0 = []
take' n [] = []
take' n (x:xs) = x : take' (n-1) xs

reverse' :: [a] -> [a]
reverse' [] = []
reverse' (x:xs) = reverse' xs ++ [x]

repeat' :: a -> [a]
repeat' x = x : repeat' x

zip' :: [a] -> [b] -> [(a,b)]
zip' _ [] = []
zip' [] _ = []
zip' (x:xs) (y:ys) = (x,y) : zip' xs ys

elem' :: (Eq a) => a -> [a] -> Bool
elem' a [] = False
elem' a (x:xs)
    | a == x = True
    | otherwise = a `elem'` xs

quicksort :: (Ord a) => [a] -> [a]
quicksort [] = []
quicksort (x:xs) =
    let smallerOrEqual = [a | a <- xs, a <= x]
        larger = [a | a <- xs, a > x]
    in quicksort smallerOrEqual ++ [x] ++ quicksort larger

multThree :: Int -> Int -> Int -> Int
multThree x y z = x * y * z

compareWithHundred :: Int -> Ordering
compareWithHundred = compare 100

applyTwice :: (a -> a) -> a -> a
applyTwice f x = f (f x)

zipWith' :: (a -> b -> c) -> [a] -> [b] -> [c]
zipWith' _ [] _ = []
zipWith' _ _ [] = []
zipWith' f (x:xs) (y:ys) = f x y : zipWith' f xs ys

flip' :: (a -> b -> c) -> (b -> a -> c)
flip' f x y = f y x

quicksort' :: (Ord a) => [a] -> [a]
quicksort' [] = []
quicksort' (x:xs) =
    let smallerOrEqual = filter (<= x) xs
        larger = filter (x <) xs
    in quicksort' smallerOrEqual ++ [x] ++ quicksort' larger

largestDivisible :: Integer
largestDivisible = head ( filter p [100000,99999..] )
    where p x = x `mod` 3829 == 0

chain :: Integer -> [Integer]
chain 1 = [1]
chain n
    | even n = n : chain( n `div` 2 )
    | odd n = n : chain( n * 3 + 1 )

numLogChains :: Int
numLogChains = length (filter isLong (map chain [1..100]))
    where isLong xs = length xs > 15

{- sum' :: (Num a) => [a] -> a -}
{- sum' xs = foldl (\ acc x -> acc + x) 0 xs -}
{- うえを簡単に書くとこうなる（カリー化） -}
sum' :: (Num a) => [a] -> a
sum' = foldl (+) 0

map' f xs = foldr (\ x acc -> (f x) : acc) [] xs

maximum' :: (Ord a) => [a] -> a
maximum' = foldl1 max

{- sqrtSums :: Int -}
sqrtSums = length (takeWhile (<1000) (scanl1 (+) (map sqrt [1..])))

oddSquareSum =  sum . takeWhile (<1000) . filter odd $ map (^2) [1..]

numUniques :: (Eq a) => [a] -> Int
numUniques = length . nub

{- wordNums = map (\ xs -> (head xs, length xs)) . group . sort . words -}
wordNums = length . group . sort . words

encode offset = map (chr . ( + offset ) . ord)
decode shift msg = encode (negate shift) msg

digitSum :: Int -> Int
digitSum = sum . map (digitToInt) . show

firstTo :: Int -> Maybe Int
firstTo num = find (\ x -> (digitSum x)  == num) [1..]


findKey :: (Eq k) => k -> [(k,v)] -> Maybe v
findKey key [] = Nothing
findKey key ((k,v):xs)
    | key == k = Just v
    | otherwise = findKey key xs

findKey' key xs = foldr (\ (k,v) acc -> if key == k then Just v else acc) Nothing xs

{- phoneBook :: Map.Map String String -}
{- phoneBook = Map.fromList [("betty", "555-2938") ,("bonnie", "452-2928") ,("patsy", "493-2928") ,("lucille", "205-2928") ,("wendy", "939-8282") ,("penny", "853-2492") ] -}

string2digits = map digitToInt . filter isDigit

phoneBook = [("betty", "555-2938") ,("betty", "342-2492") ,("bonnie", "452-2928") ,("patsy", "493-2928") ,("patsy", "943-2929") ,("patsy", "827-9162") ,("lucille", "205-2928") ,("wendy", "939-8282") ,("penny", "853-2492") ,("penny", "555-2111") ]

phoneBookToMap xs = Map.fromListWith (++) $ map (\ (k,v) -> (k,[v])) xs
