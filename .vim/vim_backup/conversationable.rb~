module Conversationable
  extend ActiveSupport::Concern

  included do
    layout :define_layout
  end

  def new
    @pre_booking = PreBooking.find params[:pre_booking]
    # vaild_provider?(@pre_booking)
    # @mail_template = set_mail_temp[:mail_template].present? ? set_mail_temp[:mail_template] : ''
    @mail_template ||= set_mail_temp[:mail_template]
    @subject ||= params[:subject]
  end

  def send_message
    subject = params[:subject]
    mail_template = set_mail_temp[:mail_template]
    pre_booking = PreBooking.find params[:pre_booking]
    if current_user
      receiver = pre_booking.listing.provider.provider_users.first
    else
      receiver = pre_booking.user
    end

    # vaild_provider?(pre_booking)

    message = define_people.send_message( receiver, mail_template, subject, association: pre_booking, notify: true )
    # if receiver.is_a?(ProviderUser)
      # ProviderPreBookingMailer.
      # add_information_to_user(pre_booking.id, mail_template).deliver
    # else
      # MessagesNotifyMailer.send_email(message, receiver)
    # end
    flash[:notice] = "メッセージが送信されました。"
    if current_user
      redirect_to sent_user_conversations_path
    else
      redirect_to sent_provider_conversations_path
    end
  end

  def sent
    @conversations = define_people.sentbox
  end

  def index
    @conversations = define_people.inbox
  end

  def show
    @conversation = Conversation.find(params[:id])
    # @messages = @conversation.receipts_for(define_people).map(&:message)
    @messages = @conversation.messages.order(created_at: :desc)
    # @conversation.receipts_for(define_people).mark_as_read
    @conversation.mark_as_read(define_people)
  end

  def message
    @message = Message.find(params[:id])
  end


  def reply
    conversation = Conversation.find params[:conversation_id]
    define_people.reply(conversation, params[:body], subject: params[:subject] notify: true)

    if current_user
      redirect_to user_conversation_path(conversation)
    else
      redirect_to provider_conversation_path(conversation)
    end
  end

  private

  def vaild_provider?(pre_booking)
    current_provider.listings.find pre_booking.listing_id
  end

  def set_mail_temp
    params.permit(:mail_template)
  end

  def define_layout
    klass = self.to_s.slice(/(?<class>\w+):+?/, "class").downcase

    "#{klass}/single_pane_application"
  end

  def define_people
    current_user || current_provider_user
  end
end
