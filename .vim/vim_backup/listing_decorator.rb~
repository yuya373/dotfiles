module ListingDecorator
  def listing_status_js_params
    {
      id: id,
      listingId: id,
      apiGetStatus: available_listing_room_calendars_path(self),
      prebookingUri: link_to_apply,
      otherListingsUri: search_listings_path,
      bookingRequestsUri: link_to_apply,
      calendarUri: calendar_listing_path(self),
      minBookingMinutes: min_booking_minutes,
      isEmptyStock: stock_empty?,
    }
  end

  def calendar_js_params
    date = keeped_query[:date].presence || to_scheduler_date(Date.tomorrow)
    time = keeped_query[:time].presence || calendar_default_time.strftime("%H:%M")
    {
      listingId: id,
      date: date,
      apiGetSchedule: listing_room_calendars_path(self),
      listingAvailabilityUri: link_to_apply,
      apiGetStatus: available_listing_room_calendars_path(self),
      minBookingMinutes: min_booking_minutes,
      otherListingsUri: search_listings_path,
      defaultTime: time,
      minBookingTime: min_booking_time_units_only,
    }
  end

  def availability_js_params
    {
      id: id,
      apiGetStatus: available_listing_room_calendars_path(self),
      prebookingUri: link_to_apply,
      otherListingsUri: search_listings_path,
      bookingRequestsUri: 
    }
  end

  def link_to_apply
    return new_payment_path(listing_id: id) if payment_configuration.try(:enable?)
    new_listing_pre_booking_path(self)
  end

  def link_to_neighborhoods(suffix="")
    neighborhoods.pluck(:name,:key).map do |name, key|
      link_to name + suffix, locations_path("tokyo", key)
    end
  end

  def link_to_collections
    collections.pluck(:name,:key).map do |name, key|
      link_to name, collections_path(key)
    end
  end

  def min_booking_time_units_only
    h, m = min_booking_minutes.divmod(60)
    result = ""
    result << "#{h}時間" if h > 0
    result << "#{m}分" if m > 0
    return "" if result.blank?
    result
  end

  def min_booking_time
    result = min_booking_time_units_only
    return "" if result.blank?
    "#{result}〜"
  end

  def min_booking_time_full
    result = min_booking_time_units_only
    return "" if result.blank?
    "#{result}から利用可"
  end

  def range_price_str(listing_id_prices)
    find_range_price(listing_id_prices).presence || "?"
  end

  def week_stock(listing_stocks, range)
    listing_stocks.find do |e|
      e.listing_id == id && e.start_at_in?(range)
    end
  end

  def stock_empty?
    @stock_empty ||= !ListingStock.two_weeks_exists?(self)
  end

  def link_to_city
    name = listing_location.city
    return name if listing_city.blank?
    link_to(name,
            prefecture_city_listings_path(listing_location.pref_cd,
                                          listing_city.city_id),
            class: "tx-gray dot-light")
  end

  def card_featured_photo(has_link)
    thumb = mobile_request? ? thumb_url : featured_photo.try(:thumb)
    if has_link
      link_to listing_path(self) do
        image_tag thumb, alt: title
      end
    else
      image_tag thumb, alt: title
    end
  end

  def business_hours_by_datetime
    r = calendar_configurations.map do |e|
      business_hours = if e.is_open?
                         time_str(e.open_at) + "-" + time_str(e.close_at)
                       else
                         "休日"
                       end
      [e.ordered_wday, calendar_short_dayname(e.wday), business_hours]
    end.group_by(&:last)

    return [["全日", r.keys.first]] if r.size == 1

    r.map do |business_hour, day_names|
      [day_names.sort_by(&:first).map(&:second).join("・"), business_hour]
    end
  end

  def enough_query?(query)
    query.values_at(:date,:time,:hours).all?(&:present?)
  end

  def bank_available?(start_at)
    return false unless payment_configuration.is_bank?
    bank_limit_at = Time.current.end_of_day +
      payment_configuration.bank_limit_days.days
    bank_limit_at < start_at
  end

  def card_available?
    payment_configuration.is_card?
  end

  def party_default_value(query)
    query[:party].presence || query[:party_min].presence || capacity
  end

  def settlements
    if payment_configuration
      [].tap do |a|
        a << "銀行振込(#{payment_configuration.bank_limit_days}営業日前)" if
          payment_configuration.is_bank?
        a << "クレジットカード" if payment_configuration.is_card?
      end
    else
      pre_settlements.pluck(:description)
    end
  end

  def dummy_provider?
    provider_id == 87
  end

  private

  def find_range_price(listing_id_prices)
    listing_id_prices.find do |listing_id, _|
      listing_id == id
    end.try(:last)
  end
end
